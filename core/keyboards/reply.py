import json
from urllib.parse import quote

from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types.web_app_info import WebAppInfo

from core.utils.get_address import get_address


def get_web_url(order: str = None, path: str = '') -> str:
    web_url = 'https://www.pizzeria-almaty.kz' + path
    if order is not None:
        web_url += f'/?cart={quote(json.dumps(json.loads(order)["products"]))}'
    return web_url


def get_main_reply_keyboard(order: dict | None):
    keyboard_builder = ReplyKeyboardBuilder()

    keyboard_builder.button(text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', callback_data='test')
    keyboard_builder.button(text='üìï –ú–µ–Ω—é', web_app=WebAppInfo(url=get_web_url(order)))
    keyboard_builder.button(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', web_app=WebAppInfo(url=get_web_url(order, path='/cart')))
    keyboard_builder.button(text='üöñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='show-cart')
    keyboard_builder.button(text='üóÉ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='show-history')
    keyboard_builder.button(text='üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='my-data')
    keyboard_builder.button(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contact')
    keyboard_builder.adjust(1, 2, 2, 2)

    return keyboard_builder.as_markup(
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        resize_keyboard=True,
    )

def get_delivery_reply_keyboard():
    keyboard_builder = ReplyKeyboardBuilder()

    keyboard_builder.button(text='üöñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='show-cart')
    keyboard_builder.button(text='üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='my-data')

    return keyboard_builder.as_markup(
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        resize_keyboard=True,
    )


def get_manager_reply_keyboard():
    keyboard_builder = ReplyKeyboardBuilder()

    keyboard_builder.button(text='–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='contact')
    keyboard_builder.button(text='‚ùó –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='contact')
    keyboard_builder.button(text='–û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑—ã', callback_data='contact')
    keyboard_builder.button(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='contact')
    keyboard_builder.button(text='–ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='contact')
    keyboard_builder.button(text='–û–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑—ã', callback_data='contact')
    keyboard_builder.button(text='–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='contact')

    keyboard_builder.adjust(1, 1, 2, 2, 1)

    return keyboard_builder.as_markup(
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        resize_keyboard=True,
        one_time_keyboard=False
    )


def get_back_reply_keyboard():
    keyboard_builder = ReplyKeyboardBuilder()
    keyboard_builder.button(text='üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to-back')

    return keyboard_builder.as_markup(
        input_field_placeholder='‚è¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        resize_keyboard=True,
        # one_time_keyboard=True
    )


def order_reply_keyboard(order: dict | None, placeholder: str, additional_buttons=None, adjust=None):
    keyboard_builder = ReplyKeyboardBuilder()

    if additional_buttons is None:
        additional_buttons = []

    if isinstance(additional_buttons, dict):
        for key, value in additional_buttons.items():
            if key == 'geo':
                keyboard_builder.button(text=value, request_location=True)
            if key == 'contact':
                keyboard_builder.button(text=value, request_contact=True)
            else:
                keyboard_builder.button(text=value, callback_data=value)
    elif isinstance(additional_buttons, list):
        for button in additional_buttons:
            keyboard_builder.button(text=button, callback_data=f"{button}")
    else:
        raise KeyError(f"Unknown additional buttons type: {additional_buttons}\nType: {type(additional_buttons)}")

    keyboard_builder.button(text='üìï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', web_app=WebAppInfo(url=get_web_url(order)))
    keyboard_builder.button(text='üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', web_app=WebAppInfo(url=get_web_url(order, '/cart')))
    keyboard_builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')

    if adjust is not None and isinstance(adjust, list):
        keyboard_builder.adjust(*(adjust + [1, 1, 1]))
    else:
        keyboard_builder.adjust(
            *[len(additional_buttons.keys() if isinstance(additional_buttons, dict) else additional_buttons),
              1, 1, 1]
        )

    return keyboard_builder.as_markup(
        input_field_placeholder=placeholder,
        resize_keyboard=True,
        # one_time_keyboard=True
    )


# def get_delivery_reply_keyboard(order: dict | None):
#     return order_reply_keyboard(order,
#                                 placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
#                                 additional_buttons=['üõµ –î–æ—Å—Ç–∞–≤–∏—Ç—å', 'üö∂üèº –°–∞–º–æ–≤—ã–≤–æ–∑'])


def get_usernames_reply_keyboard(order: dict | None, user: dict):
    return order_reply_keyboard(order,
                                placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª–æ–µ –∏–º—è –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
                                additional_buttons=[user['telegram_fullname']])


def get_phones_reply_keyboard(order: dict | None, user: dict):
    return order_reply_keyboard(order,
                                placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
                                additional_buttons={'': user['phone'], 'contact': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä'})


def get_geo_reply_keyboard(order: dict | None, user: dict):
    address = user['address']
    loc = address['loc']
    lat = address['lat']
    text_address = get_address(lat, loc)

    return order_reply_keyboard(order,
                                placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É',
                                additional_buttons={"": text_address, 'geo': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å'})


def get_exact_geo_reply_keyboard(order: dict | None, user: dict):
    return order_reply_keyboard(order,
                                placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
                                additional_buttons=[user['exact_address']])


def get_bonus_reply_keyboard(order: dict | None):
    return order_reply_keyboard(order,
                                placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã –∏–ª–∏ –Ω–µ—Ç',
                                additional_buttons=['‚ùå –ù–µ—Ç', '‚úî –î–∞'])


def get_kaspi_phone_reply_keyboard(order: dict | None, user: dict):
    return order_reply_keyboard(order,
                                placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π –Ω–æ–º–µ—Ä –∫–∞—Å–ø–∏ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
                                additional_buttons={'': user['phone'], 'contact': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä'})


