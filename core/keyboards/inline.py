import json
from urllib.parse import quote

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types.web_app_info import WebAppInfo

from core.utils.OrderTest import Order
from core.settings import settings


def get_web_url(order: str = None, path: str = '') -> str:
    web_url = settings.bots.site_path + path
    if order is not None:
        web_url += f'/?cart={quote(json.dumps(json.loads(order)["products"]))}'
    return web_url


def get_main_inline_keyboard():
    keyboard_builder = InlineKeyboardBuilder()

    keyboard_builder.button(text='üìï –ú–µ–Ω—é', web_app=WebAppInfo(url=settings.bots.site_path))
    # keyboard_builder.button(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', web_app=WebAppInfo(url="https://www.pizzeria-almaty.kz/cart"))
    # keyboard_builder.button(text='üóÉ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='show-history')
    keyboard_builder.button(text='üöñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', web_app=WebAppInfo(
        url=settings.bots.site_path + 'active_orders'))
    keyboard_builder.button(text='üóÉ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', web_app=WebAppInfo(
        url=settings.bots.site_path + 'history_orders'))
    keyboard_builder.button(text='üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='my-data')
    keyboard_builder.button(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contact')
    keyboard_builder.adjust(1, 2, 2)

    return keyboard_builder.as_markup(
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        resize_keyboard=True,
    )


def get_manager_inline_keyboard():
    keyboard_builder = InlineKeyboardBuilder()

    keyboard_builder.button(text='üìã –ó–∞–∫–∞–∑—ã', web_app=WebAppInfo(url=settings.bots.site_path))
    keyboard_builder.button(text='üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='my-data')
    keyboard_builder.adjust(1, 1, 1)

    return keyboard_builder.as_markup(
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        resize_keyboard=True,
    )


def get_back_inline_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text='üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to-back')

    return keyboard_builder.as_markup(
        input_field_placeholder='‚è¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        resize_keyboard=True,
        # one_time_keyboard=True
    )


def get_orders_inline_keyboard(orders: list[Order] | None):
    keyboard_builder = InlineKeyboardBuilder()

    for order in orders:
        print(f'Order: {order}')
        keyboard_builder.button(text=f'–ó–∞–∫–∞–∑ ‚Ññ{order.id}', callback_data=str(order.id))
    keyboard_builder.button(text='–ù–∞–∑–∞–¥', callback_data='back')

    keyboard_builder.adjust(*([1] * (len(orders) + 1)))

    return keyboard_builder.as_markup(
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑',
        resize_keyboard=True,
    )


def get_change_order_type_inline_keyboard(order: Order):
    keyboard_builder = InlineKeyboardBuilder()

    text_by_status = {
        'manager_await': '–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∫–ª–∏–µ–Ω—Ç—É',
        'payment_await': '–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞',
        'active': '–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞',
        'done': '–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º' if order.is_delivery
        else '–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É',
        'on_delivery': '–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º',
        'inactive': ''
    }

    if order.status != 'inactive':
        keyboard_builder.button(text=text_by_status[order.status], callback_data=str(order.id))
    keyboard_builder.button(text='–ù–∞–∑–∞–¥', callback_data='back')

    keyboard_builder.adjust(1, 1)

    return keyboard_builder.as_markup(
        resize_keyboard=True
    )


def get_rating_inline_keyboard():
    keyboard_builder = InlineKeyboardBuilder()

    keyboard_builder.button(text="üòû", callback_data='rating-0')
    keyboard_builder.button(text="üòê", callback_data='rating-1')
    keyboard_builder.button(text="üôÇ", callback_data='rating-2')
    keyboard_builder.button(text="üòä", callback_data='rating-3')

    keyboard_builder.adjust(4)

    return keyboard_builder.as_markup(
        resize_keyboard=True
    )
