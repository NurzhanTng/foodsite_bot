import json
import logging

from aiogram import Bot, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.keyboards.inline import get_mailing_inline_keyboard
from core.utils.ChatHistoryHandler import ChatHistoryHandler
from core.utils.RestHandler import RestHandler
from core.handlers.basic import get_start

router = Router()


@router.message(Command(commands=['mailing']))
async def send_mailing(message: Message, bot: Bot, chat_handler: ChatHistoryHandler, rest: RestHandler,
                       state: FSMContext):
    context = await state.get_data()
    user = context.get('user', None)
    if user is None:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. \n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        return

    if user.get('role', 'client') != 'admin':
        logging.error(f"User {user.get('telegram_id', -1)} tried to send out a mailing")
        return

    users = await rest.post('service/users_find/', data={"role": "admin"})
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users)}')
    error_users = {}
    for user in users:
        chat_id = user.get('telegram_id', -1)
        try:
            message_id = (await bot.send_photo(chat_id,
                                               "https://pizza.pizzeria-almaty.kz/media/images/margarita_low.jpg")
                          ).message_id
            chat_handler.add_new_message(chat_id, message_id)
            message_id = (await bot.send_message(chat_id,
                                                 "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∞—à –¥—Ä—É–≥ –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º –ø–∏—Ü—Ü—É –ú–∞—Ä–≥–∞—Ä–∏—Ç—É "
                                                 "–æ—Ç–º–µ—Ç–∏–≤ –≤–∞—Å, –Ω–∞ –ª—é–±–æ–π –≤–∞—à –∑–∞–∫–∞–∑ –º—ã –ø–æ–¥–∞—Ä–∏–º –≤–∞–º "
                                                 "–≤–∫—É—Å–Ω—É—é –ø–∏—Ü—Ü—É –æ—Ç –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞. –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ "
                                                 "—Å—Å—ã–ª–∫–µ, –≥–¥–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ –≤–∞–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞—à–∞ –ø–∏—Ü—Ü–∞ üëá",
                                                 reply_markup=get_mailing_inline_keyboard())).message_id
            chat_handler.add_new_message(chat_id, message_id)
        except Exception as e:
            error_users[chat_id] = {
                'error': e,
                'location': f"{e.__traceback__.tb_frame.f_code.co_filename} "
                            f"(—Å—Ç—Ä–æ–∫–∞ {e.__traceback__.tb_lineno}, "
                            f"–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {e.__traceback__.tb_frame.f_code.co_name})"
            }
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ '
                         f'—Å–æ–æ–±—â–µ–Ω–∏—è [{len(users) - len(error_users)}/{len(users)}]')
    logging.info(f'–†–∞—Å—Å—ã–ª–∫–∞: {error_users}')


@router.callback_query(F.data == "mailing_cancel")
async def go_back(callback: CallbackQuery, chat_handler: ChatHistoryHandler, rest: RestHandler, state: FSMContext,
                  command: CommandObject | None = None):
    await chat_handler.delete_messages(callback.message.chat.id)
    await get_start(callback.message, chat_handler, rest, state, command)

