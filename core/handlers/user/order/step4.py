from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.handlers.basic import get_start
from core.keyboards.reply import get_geo_reply_keyboard, get_bonus_reply_keyboard
from core.utils.ChatHistoryHandler import ChatHistoryHandler
from core.utils.RestHandler import RestHandler
from core.utils.is_valid_phone_number import is_valid_phone_number
from core.utils.states import States
from .step3 import main_logic as step3_main_logic

router = Router()


async def main_logic(message: Message, state: FSMContext, chat_handler: ChatHistoryHandler, rest: RestHandler,
                     phone: str | None = None):
    if not is_valid_phone_number(phone):
        await chat_handler.delete_messages(message.chat.id)
        await chat_handler.send_message(message,
                                        f'*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!*\n'
                                        f'–õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏\n'
                                        f'–§–æ—Ä–º–∞—Ç:\n_87471231212_\n_+77471231212_\n'
                                        f'–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return

    context = await state.get_data()
    if phone is not None:
        await state.update_data(phone=phone)
    await chat_handler.delete_messages(message.chat.id)

    if context.get('is_delivery'):
        await chat_handler.send_message(message,
                                        f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é c –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"'
                                        '_–õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–æ—Ç–æ–≤—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Ä–∞–Ω–µ–µ_'
                                        '_–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–∞–º–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫—Ä–µ–ø–∫–∏ "üìé" –∏ '
                                        '–≤—ã–±–µ—Ä–∏—Ç–µ "–õ–æ–∫–∞—Ü–∏—è/Location", –∑–∞—Ç–µ–º –ø–æ–¥–µ–ª–∏—Ç—Å—è –ª–æ–∫–∞—Ü–∏–µ–π_',
                                        reply_markup=get_geo_reply_keyboard(order=context.get('order'),
                                                                            user=context.get('user'))
                                        )
        await state.set_state(States.ORDER_GEO)
    else:
        await chat_handler.send_message(message,
                                        f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å: ${context.get("user")["bonus"]} –±–æ–Ω—É—Å–æ–≤!\n'
                                        f'–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö?',
                                        reply_markup=get_bonus_reply_keyboard(context.get('order')))
        await state.set_state(States.ORDER_PAY_BONUS)


@router.message(States.ORDER_PHONE, F.contact)
async def get_order(message: Message, state: FSMContext, chat_handler: ChatHistoryHandler, rest: RestHandler):
    await main_logic(message, state, chat_handler, rest, phone=message.contact.phone_number)


@router.message(States.ORDER_PHONE, F.web_app_data)
async def show_menu(message: Message, state: FSMContext, chat_handler: ChatHistoryHandler):
    await state.update_data(order=message.web_app_data.data)
    await step3_main_logic(message, state, chat_handler)


@router.message(States.ORDER_PHONE, F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel(message: Message, chat_handler: ChatHistoryHandler, rest: RestHandler, state: FSMContext):
    await state.clear()
    await get_start(message, chat_handler, rest, state, None)


@router.message(States.ORDER_PHONE, F.text)
async def get_order(message: Message, state: FSMContext, chat_handler: ChatHistoryHandler, rest: RestHandler):
    await main_logic(message, state, chat_handler, rest, message.text)


@router.message(States.ORDER_PHONE, lambda message: True)
async def handle_all_messages(message: Message):
    print('–ó–∞–≥–ª—É—à–∫–∞ [States.ORDER_PHONE]')
