from aiogram import Bot, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from core.keyboards.reply import get_main_reply_keyboard
from core.utils.ChatHistoryHandler import ChatHistoryHandler
from core.utils.RestHandler import RestHandler
from core.filters.without_state_filter import WithoutStateFilter

router = Router()


# @router.startup()
# async def start_bot(bot: Bot):
#     await bot.send_message(settings.bots.admin_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


@router.message(Command(commands=['start', 'run']))
async def _get_start(message: Message, command: CommandObject, chat_handler: ChatHistoryHandler, rest: RestHandler,
                     state: FSMContext):
    await message.answer('–í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –û–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö –Ω–µ –≤—ã–ª–µ—Ç–∞–ª–æ')
    await get_start(message, chat_handler, rest, state, command)


async def get_start(message: Message, chat_handler: ChatHistoryHandler, rest: RestHandler,
                    state: FSMContext, command: CommandObject | None = None) -> None:
    try:
        if command is None:
            payload = {
                'chat_id': message.chat.id,
                'full_name': message.from_user.full_name,
                'token': '',
            }
        else:
            payload = {
                'chat_id': message.chat.id,
                'full_name': message.from_user.full_name,
                'token': '' if command.args is None else command.args,
            }

        # user = await rest.post(url='users', data=payload)
        user = {
            "telegram_id": message.from_user.id,
            "telegram_fullname": message.from_user.full_name,
            "phone": '+77074862447',
            "address": {"loc": 76.945621, "lat": 43.242977},
            "exact_address": '–ö–≤–∞—Ä—Ç–∏—Ä–∞ 42',
            "bonus": 1000,
            "role": "user",
            "blocked": False,
            "updated_at": '2023-01-13',
            "created_at": '2023-01-13'
        }
        await state.update_data(user=user)
        context = await state.get_data()
        order = context.get("order")
        await chat_handler.delete_messages(message.chat.id)
        await chat_handler.send_message(message,
                                        f"üëãüèª *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é "
                                        f"{'' if user['telegram_fullname'] is None else user['telegram_fullname']}!*\n"
                                        f"*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å:* {user['bonus']} –±–æ–Ω—É—Å–æ–≤!\n" +
                                        f"_–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —ç—Ç–∏ –±–æ–Ω—É—Å—ã_\n" +
                                        f"_–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏._",
                                        reply_markup=get_main_reply_keyboard(order))
    except Exception as e:
        print(e)


@router.message(WithoutStateFilter(), lambda message: not message.web_app_data)
async def handle_all_messages(message: Message):
    print('–ó–∞–≥–ª—É—à–∫–∞')
    ...
