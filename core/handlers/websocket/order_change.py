import logging
from aiogram import Bot, Router, F
from core.models.Order import Order
from core.utils.ChatHistoryHandler import ChatHistoryHandler
from core.keyboards.inline import get_rating_inline_keyboard
from core.utils.fetch_users import fetch_users


async def send_new_order_to_role(company_id: int, order_id: int, role: str):
    ids = await fetch_users(company_id, role)
    for user_id in ids:
        try:
            message_id = (await bot.send_message(int(manager_id), f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id}",
                                                 reply_markup=get_manager_order_inline_keyboard(order_id))).message_id
            manager_history.add_new_message(f'{manager_id}|{order_id}', message_id)
        except Exception as e:
            logging.error(f"New order error [{role}]: {e}")


async def order_change(bot: Bot, message_history: ChatHistoryHandler, manager_history: ChatHistoryHandler,
                       order: Order):
    order_price = 0
    for product in order.products:
        order_price += product.price

    text_by_status = {
        # 'manager_await': '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!',
        'manager_await': '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –í–∞–º –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ –∫–∞—Å–ø–∏. –ü–æ—Å–ª–µ '
                         '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞',
        'payment_await': '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ –∫–∞—Å–ø–∏. –ü–æ—Å–ª–µ '
                         '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞',
        'active': '–ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã. –ü—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞',
        'done': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ –µ–≥–æ –ø–æ –∞–¥—Ä–µ—Å—É: –≥.–ê–ª–º–∞—Ç—ã. –¢–†–ö Forum. –ü—Ä–æ—Å–ø–µ–∫—Ç '
                '–°–µ–π—Ñ—É–ª–ª–∏–Ω–∞, 617 / 3 —ç—Ç–∞–∂',
        'on_delivery': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–Ω –¥–æ—Å—Ç–∞–≤—â–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
        # 'inactive': f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ '
        #             f'{(order_price - (int(order.bonus_amount) if order.bonus_used else 0)) // 20} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤',
        'inactive': f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ '
                    f'1000 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤',
        'rating': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç "
                  "–∑–∞–∫–∞–∑–∞:\n\nüòû - –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å\nüòê - –°—Ä–µ–¥–Ω–µ\nüôÇ - –•–æ—Ä–æ—à–æ\nüòä - –û—Ç–ª–∏—á–Ω–æ",
        'rejected': f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: *{order.rejected_text}*",
        'on_runner': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ –µ–≥–æ –ø–æ –∞–¥—Ä–µ—Å—É: –≥.–ê–ª–º–∞—Ç—ã. –¢–†–ö Forum. –ü—Ä–æ—Å–ø–µ–∫—Ç '
                     '–°–µ–π—Ñ—É–ª–ª–∏–Ω–∞, 617 / 3 —ç—Ç–∞–∂'
    }
    try:
        if order.status in ["payment_await", "active"]:
            manager_ids = await fetch_users(order.company_id, 'manager')
            for manager_id in manager_ids:
                await manager_history.delete_messages(f'{manager_id}|{order.id}', '|')

        if (order.status == "done" or
                (order.status == "on_runner" and order.is_delivery) or
                (order.status == "manager_await" and order.rejected_text)):
            return
        if order.status == "active":
            await send_new_order_to_role(order.company_id, order.id, 'cook')
        if order.status == "on_runner":
            await send_new_order_to_role(order.company_id, order.id, 'runner')
        if order.status == "on_delivery":
            await send_new_order_to_role(order.company_id, order.id, 'delivery')
        if order.status == "inactive":
            await message_history.delete_messages(order.client_id)
            message_id = (await bot.send_message(int(order.client_id), text_by_status[
                order.status])).message_id
            rating_id = (await bot.send_message(int(order.client_id), text_by_status['rating'],
                                                reply_markup=get_rating_inline_keyboard())).message_id
            message_history.add_new_message(order.client_id, message_id)
            message_history.add_new_message(order.client_id, rating_id)
            return
        if order.status == "on_delivery":
            message_id = (await bot.send_message(int(order.client_id), text_by_status[
                order.status])).message_id
            del_message_id = (await bot.send_message(int(order.delivery_id),
                                                     f"–í–∞–º –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ {order.id}")).message_id
            message_history.add_new_message(order.client_id, message_id)
            message_history.add_new_message(order.delivery_id, del_message_id)
            return

        if order.status == 'rejected' and order.bonus_used and order.bonus_amount != 0:
            message_id = (await bot.send_message(
                int(order.client_id),
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {order.bonus_amount} –±–æ–Ω—É—Å–æ–≤")).message_id
            message_history.add_new_message(order.client_id, message_id)

        message_id = (await bot.send_message(int(order.client_id), text_by_status[order.status])).message_id
        message_history.add_new_message(order.client_id, message_id)

    except Exception as e:
        print(e)
